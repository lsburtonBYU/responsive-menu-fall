/****** vars ******/

:root {
    /* ibis leg */
    --main-highlight-color: #453638;

    /* dying grass */
    --second-highlight-color: #636d44;

    /* dust */
    --contrast-color-light: #c7be9a;
    --contrast-color-light-darker: #ada06c;

    /* ibis black */
    --contrast-color-dark: #34373b;
    --contrast-color-dark-lighter: #6b687e;

    /* dirty white feather */
    --background-color: #E6E7E7;
    --text-color: #333;
    --heading-font: 'Bebas Neue', cursive;
}

*,
*::before,
*::after {
    /* it's common to add this to every stylesheet; it forces 
    a box element to include the content, borders and padding 
    in its set width and height (margins are not included) */
    box-sizing: border-box;
}

/****** tags *****/
body {
    font-family: 'Montserrat', sans-serif;
    color: var(--text-color);
    background-color: var(--background-color);
    line-height: 1.6;
    font-size: 1.25rem;
    display: flex;
    flex-direction: column;
    /* added to keep the positioning of .full-width (on the aside) from 
       causing a horizontal scroll bar to appear */
    overflow-x: hidden;
}

h1,
h2,
h3 {
    font-family: var(--heading-font);
    line-height: 1em;
}

h1 {
    font-size: 4rem;
    color: var(--main-highlight-color);
}

h2 {
    font-size: 2.25rem;
    color: var(--second-highlight-color);
}

a {
    cursor: pointer;
    display: inline-block;
}

img {
    /* generally good to add these to image
       width: 100%; forces the image to span the width of the screen or it's
       bounding box. Until we get to responsive, you may have to limit the size of images that are not in the hero or cards.

       display: block; keeps line-height from adding a small gap below the 
       image */

    width: 100%;
    display: block;
}

/* I added a left and right margin to main so I could see the buttons better */
main {
    margin: 0 1rem;
    max-width: 70rem;
    align-self: center;
}

/* add whitespace above and below articles */
article {
    margin: 4rem 0 6rem;
}

/* add whitespace above button */
article .button {
    margin-top: 1rem;
}

/* font size increases with media query */
aside {
    background-color: var(--contrast-color-dark-lighter);
    color: var(--background-color);
    text-align: center;
    font-size: 2rem;
    padding: 2rem 1rem;
    text-shadow: 1px 1px rgba(0, 0, 0, .6);
}

footer {
    padding: 2rem 0;
}

/****** global classes ******/

/* This is based on the Material Design buttons */
.button {
    background-color: var(--contrast-color-light);
    background-position: center;
    font-size: .875rem;
    font-weight: 500;
    letter-spacing: .09em;
    text-transform: uppercase;
    line-height: 1;
    padding: 1rem;
    border-radius: 4px;
    /* this makes it so that a mobile user doesn't select the text if they press too long */
    user-select: none;
    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),
        0px 2px 2px 0px rgba(0, 0, 0, 0.14),
        0px 1px 5px 0px rgba(0, 0, 0, .12);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), background 800ms;
}

/* see https://codepen.io/finnhvman/pen/jLXKJw  for ripple animation  

 animation needs to occur on moving back to hover from active. Animation on 
 active ends when user ends mouse click. */
.button:hover {
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),
        0px 4px 5px 0px rgba(0, 0, 0, 0.14),
        0px 1px 10px 0px rgba(0, 0, 0, .12);
    background: var(--contrast-color-light) radial-gradient(circle, transparent 1%,
            var(--contrast-color-light) 1%) center/15000%;
}

.button:active {
    box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2),
        0px 8px 10px 1px rgba(0, 0, 0, 0.14),
        0px 3px 14px 2px rgba(0, 0, 0, .12);
    /* need to change from this background color, but don't show it on active */
    background-color: var(--contrast-color-light-darker);
    background-size: 100%;
    transition: background 0s;
}

/* allow an element to span the viewport outside the constraints of its container */
.full-width {
    position: relative;
    width: 100vw;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
}


/****** hero ******/
header {
    position: relative;
}

picture img {
    /* you can add these if you want to force the hero image to crop to
       the specified height  (100vh is full screen height) */
    /* vh = viewport height. 1vh = 1% of the screen
       max-height here says if the image extends beyond
       the height of the screen, limit it to 80% of the
       screen. If the height is less than the max-height of, don't change the height */
    max-height: 80vh;
    /* if an image extends past 100vh, object-fit crops the
       image. You can optionally use object-position to determine
       the alignment of the cropped image relative to its container */
    object-fit: cover;
    object-position: right top;
}

header .overlay {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    padding: 1rem;
    box-shadow: inset 0 0 10vw 5vw rgba(0, 0, 0, .6);
    line-height: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

header h1 {
    color: var(--background-color);
    /* 
    given:  the base font for most browsers is 16px
            1rem = one unit of base font or 16px
            1vw  = 1% of the screen width (CSS pixels)

    using clamp(3rem, 6vw, 6rem)

            clamp() is a way to change font sizes dependant on screen width. In this case, I don't want the font smaller than 3rem on small screens. On wide screens, I don't want the font bigger than 6rem. I use the value 6vw to dynamically size the font between 3rem and 6rem.  
            
            For the max, 6rem = 96px. 6vw becomes equal to 96px when the screen is 1600px wide. (96px / 6vw * 100 = 1600).
            
            For the min, 3rem = 48px. 6vw becomes equal to 48px when the screen is 800px wide. (48px / 6vw * 100 = 800)
    */
    font-size: clamp(3rem, 6vw, 6rem);
    letter-spacing: 1px;
    text-shadow: 1px 1px 2px var(--contrast-color-dark);
    margin: 0 0 0 2rem;
}

header p {
    color: var(--background-color);
    font-size: clamp(1.5rem, 3vw, 2rem);
    letter-spacing: -2px;
    margin: 0 0 3rem 2rem;
}

/****** main nav ******/

nav ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
}

nav li a {
    display: block;
    color: var(--text-color);
    font-size: 1.5rem;
    margin: 1rem;
    padding: 1rem 1.8rem;
    text-decoration: none;
    border-bottom: 3px solid transparent;
}

nav li a[href]:hover {
    border-bottom: 3px solid var(--second-highlight-color);
}

/****** panel *****
    this is written "mobile-first" -- the CSS below is for the mobile
    version. The media queries will change the panel when the viewport width 
    increases. The left class is only needed when the screen is wider than 
    mobile, so it is in the media query */
.panel {
    display: flex;
    flex-direction: column;
}

.panel .image-wrapper {
    order: -1;
    margin-bottom: 2rem;
}

.panel h2 {
    margin-top: 0;
}

/****** cards *****/
/** as with panels, I'm using "mobile first" design, so the layout here 
    is for mobile */
.cards {
    display: flex;
    flex-direction: column;
    /* since these are outside main add a margin on left and right so the images 
      don't run to the edge of the viewport */
    margin: 0 1rem;
}

.card {
    position: relative;
    margin-bottom: 1rem;
}

/* keep margins tidy */
.card:last-child {
    margin-bottom: 0;
}

.card a {
    display: block;
    user-select: none;
}

.card p,
.card span {
    position: absolute;
    opacity: 0;
    transition: opacity 300ms ease;
}

.card p {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: 0;
    background-color: rgba(99, 109, 68, .6);
    overflow: hidden;
}

.card span {
    bottom: 2rem;
    display: inline-block;
    background-color: var(--contrast-color-light);
    padding: 1.8rem 4rem 1.8rem 2rem;
    text-transform: uppercase;
    font-size: .875rem;
    font-weight: 500;
    letter-spacing: .09em;
    box-shadow: 6px 6px 6px rgba(46, 44, 36, 0.6);
}

.card:hover p,
.card:hover span {
    opacity: 1;
}

/****** form ******/
.form main {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.svg {
    width: 200px;
}

.form {
  --color: var(--main-highlight-color);
}

.loading {
  position: relative;
  margin: 6rem 7rem 0rem 0rem;
}

.loading .wrapper {
  width: 100px;
  height: 100px;
  position: absolute;
}

/* these position the dots in a ring */
.loading .wrapper:nth-of-type(1) {
  transform: rotate(30deg);
}

.loading .wrapper:nth-of-type(2) {
  transform: rotate(60deg);
}

.loading .wrapper:nth-of-type(3) {
  transform: rotate(90deg);
}

.loading .wrapper:nth-of-type(4) {
  transform: rotate(120deg);
}

.loading .wrapper:nth-of-type(5) {
  transform: rotate(150deg);
}

.loading .wrapper:nth-of-type(6) {
  transform: rotate(180deg);
}

.loading .wrapper:nth-of-type(7) {
  transform: rotate(210deg);
}

.loading .wrapper:nth-of-type(8) {
  transform: rotate(240deg);
}

.loading .wrapper:nth-of-type(8) {
  transform: rotate(240deg);
}

.loading .wrapper:nth-of-type(9) {
  transform: rotate(270deg);
}

.loading .wrapper:nth-of-type(10) {
  transform: rotate(300deg);
}

.loading .wrapper:nth-of-type(11) {
  transform: rotate(330deg);
}

/* incrementally delay animation for each dot */
.loading .wrapper:nth-of-type(1) > div {
  animation-delay: 0s;
}

.loading .wrapper:nth-of-type(2) > div {
  animation-delay: .1s;
}

.loading .wrapper:nth-of-type(3) > div {
  animation-delay: .2s;
}

.loading .wrapper:nth-of-type(4) > div {
  animation-delay: .3s;
}

.loading .wrapper:nth-of-type(5) > div {
  animation-delay: .4s;
}

.loading .wrapper:nth-of-type(6) > div {
  animation-delay: .5s;
}

.loading .wrapper:nth-of-type(7) > div {
  animation-delay: .6s;
}

.loading .wrapper:nth-of-type(8) > div {
  animation-delay: .7s;
}

.loading .wrapper:nth-of-type(9) > div {
  animation-delay: .8s;
}

.loading .wrapper:nth-of-type(10) > div {
  animation-delay: .9s;
}

.loading .wrapper:nth-of-type(11) > div {
  animation-delay: 1s;
}

.loading .wrapper:nth-of-type(12) > div {
  animation-delay: 1.1s;
}

.loading .wrapper > div {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: var(--color);
}

/* each dot will pulse by scaling in and out
   the animation delay will make them appear
   like they are rotating. */

.loading .wrapper > div  {
  animation: pulse 1.2s ease-in-out infinite alternate;
}

@keyframes pulse {
  from {
    opacity: 1
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0);
  }
}


/*** media queries ****
  these are written "mobile first" they change the CSS as the viewport
  width increases */

/* breakpoint to switch cards to 2x2 */
@media screen and (min-width: 560px) {
    .cards {
        flex-direction: row;
        flex-wrap: wrap;
    }

    .card {
        flex: 1 1 40%;
    }

    /* tidy margins */
    .card:nth-of-type(odd) {
        margin-right: 1rem;
    }

    .card:nth-of-type(3) {
        margin-bottom: 0;
    }
}

/* first breakpoint for panels
   increase <aside> font size
   add more whitespace above and below <article>
  */
@media screen and (min-width: 750px) {

    /* add more whitespace to article */
    article {
        margin: 10rem 0;
    }

    aside {
        font-size: 3rem;
    }

    /* switch panel to row and adjust spacing */
    .panel {
        flex-direction: row;
    }

    /* reset order which was added to force images to appear above text on 
       mobile. Remove margin - the left class will add the needed whitespace.
       Add flex (not needed on mobile) */
    .panel .image-wrapper {
        order: 0;
        margin-bottom: 0;
        flex: 1 1 50%;
    }

    .panel .text-wrapper {
        flex: 1 1 50%;
    }

    .panel .left {
        order: -1;
        margin-right: 2rem;
    }

    /* remove h2 top margin */
    .panel h2 {
        margin-top: 0;
    }

    /* this crops the image so that it's the same height as the text. Only use this
       if you don't have much text. If your text is too long, the image will have an
       odd aspect ratio (rather too tall) */
    .panel img {
        height: 100%;
        object-fit: cover;
    }
}

/* breakpoint to switch cards to row */
@media screen and (min-width: 900px) {
    .cards {
        flex-wrap: nowrap;
        max-width: 1600px;
        align-self: center;
    }

    .card {
        flex: 1 1 0;
        margin-bottom: 0;
        margin-right: 1rem;
    }

    /* tidy margins */
    .card:last-child {
        margin-right: 0;
    }
}

/*  Switch panel flex to 60%/40% text/image */
@media screen and (min-width: 1100px) {
    .panel .image-wrapper {
        flex: 1 1 40%;
    }

    .panel .text-wrapper {
        flex: 1 1 60%;
    }
}